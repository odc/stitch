# 기능 개발 워크플로우

## 개요

- 이 문서는 프로젝트에서 새로운 기능을 개발하는 단계별 프로세스를 설명함 
- 사용자가 명시적으로 이야기하지 않는 한, 반드시 워크플로우를 따라야 함 
- 사용자가 워크플로우의 순서를 무시하고 진행하고자 하는 경우 사용자의 확인 받을 것
- **중요** 매 응답의 시작에 다음과 같이 말하고 다른 작업을 진행할 것
  - 현재 진행중인 작업: [{feature_id}_{branch_name}/todo.md] 상의 XXX 작업이며 workflow.md 워크플로우를 따르고 있음.

## 워크플로우 단계

### 1. 프로젝트 기본 맥락 분석

- 본 프로젝트의 핵심 스택
{{tech_stacks}}
  - {{name}}:{{version}}
    가이드라인 문서 위치: {{guideline_path}}
{{/tech_stacks}}

### 2. 피처 디렉토리 생성

- 템플릿 디렉토리 복사: `cp -r docs/features/_template docs/features/{feature_id}_{branch_name}`
- 이후 주요 문서는 이 디렉토리에서 작업

### 3. 요구사항 분석

- `requirements.md` 업데이트: 기능 요구사항
- 템플릿 기준으로 작업. 불필요한 섹션은 제거 가능.
- **중요** 사용자 확인 후 진행

### 4. 작업 분해 (WBS)

- 상세 작업 목록 작성: `todo.md`
- 포함 항목:
  - 수정 파일
  - 새 파일 생성
  - 테스트 요구사항:
    - E2E 테스트 위주로 작성
    - 실제 사용 시나리오 기반 테스트 케이스
    - 테스트 데이터 준비 방법
    - 관련 테스트 파일 경로
- 모든 파일 경로는 프로젝트상 full path 로 기입
- 작업간 특정 항목을 완료한 경우 완료 mark 처리
- 기존 코드와 비슷한 네이밍, 패턴을 유지하는 것을 최우선으로 삼을 것
- **중요** 사용자 확인 후 진행

### 5. 구현

- `todo.md` 작업 수행
- 단계별 완료 작업 표시
- 기존 코드와 비슷한 네이밍, 패턴을 유지하는 것을 최우선으로 삼을 것
- 기존의 코드 수정시 잠재적 문제 발생 가능성을 철저하게 탐구할 것
- 각 요소들을 개발하기 전에 가이드라인 문서를 탐색할 것
- 사용자와 명시적으로 협의되지 않은 한 기존 코드를 임의로 수정하지 말 것
- E2E 테스트 코드 작성 및 실행
- 구현 중 발생한 변경사항 문서화

### 6. 문서화

- `changes.md` 업데이트: 구현에 대한 사용자 관점의 변경사항

### 7. 커밋

- staging 은 사용자가 진행
- `git diff` 를 통해서 변경사항 확인하여 커밋 메시지 작성, commit
- 핵심적인 변경점 위주로 정리할 것
- 관리작업(ex: todo에 마크함), 사소한 작업(ex: 로그 제거)은 로그에서 제외

2. **단계별 진행**

   - 각 단계 완료 후 사용자 확인
   - 다음 단계 진행 전 피드백 반영
   - 필요시 이전 단계 수정

3. **테스트 주도 개발**
   - E2E 테스트 작성

## 작업 원칙

다음의 내용을 **반드시** 지키도록 함.

- 사용자를 개발 전문가로 대할 것
- 사용자가 제공하지 않은 요청의 경우 확인받고 진행
- 문서에서 모범사례 제공하지 말 것
- 코드로 있는 내용은 문서에서 제외, 레퍼런스만 제공
- 문서는 간결하게 작성
